version: "3.2"

networks:
  front-tier:
  back-tier:

volumes:
  prometheus_data: {}
  grafana_data: {}

services:
  fluentd:
    build: ./fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
#      - fluentd_log:/log:rw
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - back-tier

  prometheus:
    image: prom/prometheus:latest
    depends_on:
      - cadvisor
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      # Copy configurations files
      - ./prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --web.enable-lifecycle
    networks:
      - back-tier
#    restart: always
#    deploy:
#      mode: global

  #  is similar to cAdvisor , but collects the metrics of hardware and OS from the host machines itself.
  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - back-tier
#    restart: always
#    deploy:
#      mode: global

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - --config.file=/etc/alertmanager/config.yml
      - --storage.path=/alertmanager
    networks:
      - back-tier
#  restart: always
#    deploy:
#      mode: global

  # See https://hub.docker.com/r/skandyla/alertmanager-discord/
  alertmanager-discord:
    image: skandyla/alertmanager-discord
    container_name: alertmanager-discord
    environment:
      DISCORD_WEBHOOK: ${DISCORD_WEBHOOK}
      DISCORD_NAME: ${DISCORD_NAME}
    ports:
      - 9095:9095
    networks:
      - back-tier
  #  restart: always
  #    deploy:
  #      mode: global

  # cAdvisor is a daemon and monitoring tool which collects and aggregates the resource usage data from containers.
  # But it does not have its own DB to present a time-series information on the resource utilization.
  # This is where prometheus comes in picture.
  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    ports:
      - 8090:8090
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - back-tier
#  restart: always
#    deploy:
#      mode: global

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - back-tier

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - /var/log:/var/log
    command: -config.file=/etc/promtail/docker-config.yaml
    networks:
      - back-tier

  grafana:
    # Compatibility issues with camptocamp-prometheus-alertmanager-datasource
    # Wait for the merge of PR fix issue regarding grafana 6.7 / cleanup datasource request
    image: grafana/grafana:6.6.2
#    image: grafana/grafana:master
    depends_on:
      - prometheus
    container_name: grafana
    environment:
      GF_INSTALL_PLUGINS: ${GF_INSTALL_PLUGINS}
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/:/etc/grafana/
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - back-tier
      - front-tier